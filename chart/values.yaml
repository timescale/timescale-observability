# Values for configuring the deployment of TimescaleDB
# The charts README is at: 
#    https://github.com/timescale/timescaledb-kubernetes/tree/master/charts/timescaledb-single
# Check out the various configuration options (administration guide) at: 
#    https://github.com/timescale/timescaledb-kubernetes/blob/master/charts/timescaledb-single/admin-guide.md
timescaledb-single:
  # disable the chart if an existing TimescaleDB instance is used
  enabled: true
  image:
    tag: pg12-ts1.7
  # create only a ClusterIP service
  loadBalancer: 
    enabled: false
  # number or TimescaleDB pods to spawn (default is 3, 1 for no HA)
  replicaCount: 1
  
# Values for configuring the deployment of the Timescale Prometheus Connector
# The charts README is at:
#   https://github.com/timescale/timescale-prometheus/tree/master/helm-chart
timescale-prometheus:
  enabled: true
  image: timescale/timescale-prometheus:0.1.0-alpha.3.1
  # connection options
  connection:
    # the db name in which the metrics will be stored
    dbName: &metricDB postgres
    # user to connect to TimescaleDB with
    user: postgres
    password:
      # Name of a secret object (templated) containing the connection password
      # Key must be value of timescale-prometheus.connection.user
      # Created by default if timescaledb-single.enabled=true
      secretTemplate: &dbPassSecret "{{ .Release.Name }}-timescaledb-passwords"
    host:
      # Host name (templated) of the database instance, default
      # to service created in timescaledb-single
      nameTemplate: &dbHost "{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local"

  # configuration options for the service exposed by timescale-prometheus
  service:
    # we disable the load balancer by default, only a ClusterIP service
    # will get created
    loadBalancer:
      enabled: false    
  resources:
    requests:
      # By default this should be enough for a cluster 
      # with only a few pods
      memory: 2Gi
      cpu: 1
# Values for configuring the deployment of Prometheus
# The stable/prometheus chart is used and the guide for it
# can be found at: 
#   https://hub.helm.sh/charts/stable/prometheus
prometheus:
  enabled: true
  alertmanager:
    enabled: false
  pushgateway:
    enabled: false
  server:
    # we provide a config map which will have the
    # timescale-prometheus connector already configured as
    # a remote endpoint for read/write (if enabled)
    # this overrides the config map the prometheus chart 
    # creates
    configMapOverrideName: "prometheus-config"
    # values to be used in the override config map
    # for a Timescale-Prometheus remote_write and remote_read config
    timescaleRemote:
      # templated
      host: "{{ .Release.Name }}-timescale-prometheus-connector.{{ .Release.Namespace }}.svc.cluster.local"
      protocol: http
      port: "9201"
      write:
        enabled: true 
        # complete url = {protocol}://{host}:{port}/{endpoint}
        endpoint: "write"
        # write queue config 
        # see: https://prometheus.io/docs/practices/remote_write/
        queue:
          max_shards: 30
      read:
        enabled: true
        # complete url = {protocol}://{host}:{port}/endpoint
        endpoint: "read"
    
# Values for configuring the deployment of Grafana
# The stable/grafana chart is used and the guide for it
# can be found at:
#   https://hub.helm.sh/charts/stable/grafana
grafana:
  enabled: true
  sidecar:
    datasources:
      enabled: true
    dashboards:
      enabled: true
      files:
        - dashboards/k8s-cluster.json
        - dashboards/k8s-hardware.json
  envFromSecret: "{{ .Release.Name }}-grafana-db"
  prometheus:
    datasource:
      enabled: true
      # By default url of data source is set to prometheus instance 
      # deployed with this chart
      url: "http://{{ .Release.Name}}-prometheus-server.{{ .Release.Namespace }}.svc.cluster.local"
  timescale:
    database:
      enabled: true
      host:  *dbHost
      user: grafanadb
      pass: grafanadb
      dbName: *metricDB
      schema: grafanadb
      sslMode: require
    datasource:
      enabled: true
      user: grafana
      pass: grafana
      dbName: *metricDB
      sslMode: require
      # By default the url/host is set to the db instance deployed
      # with this chart
      host: *dbHost
    adminUser: postgres
    adminPassSecret: *dbPassSecret

