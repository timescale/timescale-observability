{{ if .Values.grafana.enabled -}}
{{- $timescaleAsDB := .Values.grafana.timescale.database -}}
{{- $timescaleAsDS := .Values.grafana.timescale.datasource -}}
{{ if or $timescaleAsDB.enabled $timescaleAsDS.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-grafana-db
  labels:
   app: {{ template "timescale-observability.fullname" . }}
   chart: {{ template "timescale-observability.chart" . }}
   release: {{ .Release.Name }}
data:
  add-users.sql: |-
    \set ON_ERROR_STOP on
    {{ if $timescaleAsDB.enabled -}}
    DO $$
    BEGIN
    CREATE ROLE {{ $timescaleAsDB.user }} WITH LOGIN PASSWORD '{{ $timescaleAsDB.pass }}';
    EXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;
    END
    $$;
    CREATE SCHEMA IF NOT EXISTS {{ $timescaleAsDB.schema }} AUTHORIZATION {{ $timescaleAsDB.user }};
    ALTER ROLE {{ $timescaleAsDB.user }} SET search_path = {{ $timescaleAsDB.schema }};
    {{- end -}}
    {{- if $timescaleAsDS.enabled }}
    DO $$
    BEGIN
    CREATE ROLE {{ $timescaleAsDS.user }} WITH LOGIN PASSWORD '{{ $timescaleAsDS.pass }}';
    EXCEPTION WHEN duplicate_object THEN RAISE NOTICE '%, skipping', SQLERRM USING ERRCODE = SQLSTATE;
    END
    $$;
    GRANT USAGE ON SCHEMA prom_metric TO {{ $timescaleAsDS.user }};
    GRANT SELECT ON ALL TABLES IN SCHEMA prom_metric TO {{ $timescaleAsDS.user }};

    GRANT USAGE ON SCHEMA prom TO {{ $timescaleAsDS.user }};
    GRANT SELECT ON ALL TABLES IN SCHEMA prom TO {{ $timescaleAsDS.user }};

    GRANT USAGE ON SCHEMA _prom_catalog TO {{ $timescaleAsDS.user }};
    GRANT SELECT ON ALL TABLES IN SCHEMA _prom_catalog TO {{ $timescaleAsDS.user }};
    GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA _prom_catalog TO {{ $timescaleAsDS.user }}; 
    {{- end -}}
    
{{- end -}}
{{- end -}}