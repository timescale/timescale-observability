{{- $promEnabled := .Values.prometheus.server.enabled -}}
{{- $tsEnabled := index .Values "timescaledb-single" "enabled" -}}
{{- $anyDataSources := or $tsEnabled $promEnabled -}}
{{ if $anyDataSources -}}
{{ if .Values.grafana.enabled -}}
{{ if .Values.grafana.sidecar.datasources.enabled }}
apiVersion: v1
kind: Secret
metadata: 
  name: {{ .Release.Name }}-grafana-datasources
  labels:
    grafana_datasource: "1"
    app: {{ template "timescale-observability.fullname" . }}
    chart: {{ template "timescale-observability.chart" . }}
    release: {{ .Release.Name }}
type: Opaque
stringData: 
  datasource.yaml: |-
    # config file version
    apiVersion: 1
    
    datasources:
{{- if $promEnabled -}}
{{- $promEnv := (set (set (deepCopy .) "Values" .Values.prometheus) "Chart" (dict "Name" "prometheus")) -}}
{{- $promServerName := (include "prometheus.server.fullname" $promEnv) -}}
{{- $promServerUrl := printf "http://%s.%s.svc.cluster.local:%.0f" $promServerName .Release.Namespace .Values.prometheus.server.service.servicePort }}
      - name: Prometheus
        type: prometheus
        url: {{ $promServerUrl }}
        isDefault: true
        editable: true
        access: proxy
{{- end -}}
{{- if $tsEnabled -}}
{{- $isDefault := not $promEnabled -}}
{{- $tsEnv := (set (set (deepCopy .) "Values" (index .Values "timescaledb-single")) "Chart" (dict "Name" "timescaledb")) -}}
{{- $tsHost := printf "%s.%s.svc.cluster.local" (include "clusterName" $tsEnv ) .Release.Namespace }}
      - name: TimescaleDB
        url: {{ $tsHost }}
        type: postgres
        isDefault: {{ $isDefault }}
        access: proxy
        user: postgres
        database: postgres
        editable: true
        secureJsonData:
          password: {{ index .Values "timescaledb-single" "credentials" "postgres" }}
        jsonData:
          sslmode: require
          postgresVersion: 1000
          timescaledb: true
{{- end -}}
{{- end -}}
{{- end -}}
{{- end -}}
